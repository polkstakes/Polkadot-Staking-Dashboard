{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "route-module:/Users/ashik/Personal/hackathon/polkadot-staking-dashboard/frontend/app/root.tsx", "route-module:/Users/ashik/Personal/hackathon/polkadot-staking-dashboard/frontend/app/routes/index.tsx", "../app/data/rankingData.tsx", "../app/data/handlers/identity.ts", "../app/data/handlers/session.ts", "../app/data/handlers/query.ts", "../app/data/handlers/utils.ts", "../app/data/queries.ts"],
  "sourcesContent": ["\nimport * as entryServer from \"/Users/ashik/Personal/hackathon/polkadot-staking-dashboard/frontend/app/entry.server.tsx\";\nimport * as route0 from \"/Users/ashik/Personal/hackathon/polkadot-staking-dashboard/frontend/app/root.tsx\";\nimport * as route1 from \"/Users/ashik/Personal/hackathon/polkadot-staking-dashboard/frontend/app/routes/index.tsx\";\nexport { default as assets } from \"./assets.json\";\nexport const entry = { module: entryServer };\nexport const routes = {\n  \"root\": {\n    id: \"root\",\n    parentId: undefined,\n    path: \"\",\n    index: undefined,\n    caseSensitive: undefined,\n    module: route0\n  },\n  \"routes/index\": {\n    id: \"routes/index\",\n    parentId: \"root\",\n    path: undefined,\n    index: true,\n    caseSensitive: undefined,\n    module: route1\n  }\n};", "import * as React from \"react\";\nexport { React };\n", "import { renderToString } from \"react-dom/server\";\nimport { RemixServer } from \"remix\";\nimport type { EntryContext } from \"remix\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders\n  });\n}\n", "import {\n  Link,\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useCatch\n} from \"remix\";\nimport type { LinksFunction } from \"remix\";\n\nimport globalStylesUrl from \"~/styles/global.css\";\nimport darkStylesUrl from \"~/styles/dark.css\";\n\n// https://remix.run/api/app#links\nexport let links: LinksFunction = () => {\n  return [\n    { rel: \"stylesheet\", href: globalStylesUrl },\n    {\n      rel: \"stylesheet\",\n      href: darkStylesUrl,\n      media: \"(prefers-color-scheme: dark)\"\n    }\n  ];\n};\n\n// https://remix.run/api/conventions#default-export\n// https://remix.run/api/conventions#route-filenames\nexport default function App() {\n  return (\n    <Document>\n      <Layout>\n        <Outlet />\n      </Layout>\n    </Document>\n  );\n}\n\n// https://remix.run/docs/en/v1/api/conventions#errorboundary\nexport function ErrorBoundary({ error }: { error: Error }) {\n  console.error(error);\n  return (\n    <Document title=\"Error!\">\n      <Layout>\n        <div>\n          <h1>There was an error</h1>\n          <p>{error.message}</p>\n          <hr />\n          <p>\n            Hey, developer, you should replace this with what you want your\n            users to see.\n          </p>\n        </div>\n      </Layout>\n    </Document>\n  );\n}\n\n// https://remix.run/docs/en/v1/api/conventions#catchboundary\nexport function CatchBoundary() {\n  let caught = useCatch();\n\n  let message;\n  switch (caught.status) {\n    case 401:\n      message = (\n        <p>\n          Oops! Looks like you tried to visit a page that you do not have access\n          to.\n        </p>\n      );\n      break;\n    case 404:\n      message = (\n        <p>Oops! Looks like you tried to visit a page that does not exist.</p>\n      );\n      break;\n\n    default:\n      throw new Error(caught.data || caught.statusText);\n  }\n\n  return (\n    <Document title={`${caught.status} ${caught.statusText}`}>\n      <Layout>\n        <h1>\n          {caught.status}: {caught.statusText}\n        </h1>\n        {message}\n      </Layout>\n    </Document>\n  );\n}\n\nfunction Document({\n  children,\n  title\n}: {\n  children: React.ReactNode;\n  title?: string;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        {title ? <title>{title}</title> : null}\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n        {process.env.NODE_ENV === \"development\" && <LiveReload />}\n      </body>\n    </html>\n  );\n}\n\nfunction Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"app\">\n      {children}\n    </div>\n  );\n}\n\n", "import type { MetaFunction, LoaderFunction } from \"remix\";\nimport { useLoaderData, json, Link } from \"remix\";\nimport { getRankingData } from \"~/data/rankingData\";\n\ntype IndexData = {\n  resources: Array<{ name: string; url: string }>;\n  demos: Array<{ name: string; to: string }>;\n};\n\n// Loaders provide data to components and are only ever called on the server, so\n// you can connect to a database or run any server side code you want right next\n// to the component that renders it.\n// https://remix.run/api/conventions#loader\nexport let loader: LoaderFunction = async () => {\n  const validatorAddresses = await getRankingData();\n  return json(validatorAddresses);\n};\n\n// https://remix.run/api/conventions#meta\nexport let meta: MetaFunction = () => {\n  return {\n    title: \"Remix Starter\",\n    description: \"Welcome to remix!\"\n  };\n};\n\n// https://remix.run/guides/routing#index-routes\nexport default function Index() {\n  let data = useLoaderData<IndexData>();\n\n  console.log(data);\n\n  return (\n    <div className=\"remix__page\">\n      Hello\n    </div>\n  );\n}\n", "import { ApiPromise } from \"@polkadot/api\";\nimport { WsProvider } from \"@polkadot/rpc-provider\";\nimport { GraphQLClient } from \"graphql-request\";\nimport { getValidatorsWithIdentity } from \"./handlers/identity\";\nimport { accountQuery } from \"./handlers/query\";\nimport { BigNumber } from \"bignumber.js\";\nimport {\n  getClusterInfo,\n  getCommissionHistory,\n  getCommissionRating,\n  getPayoutRating,\n  parseIdentity,\n} from \"./handlers/utils\";\nimport {\n  GetCouncilVotes,\n  GetEraPoints,\n  GetEraPreferences,\n  GetEraSalashes,\n  GetMaxNominatorRewardedPerValidator,\n  GetNomination,\n  GetProposals,\n  GetReferendums,\n  GetValidatorAddresses,\n} from \"./queries\";\n\nconst provider = new WsProvider(\"wss://polkadot.api.onfinality.io/public-ws\");\n\nconst stakingQueryFlags = {\n  withDestination: false,\n  withExposure: true,\n  withLedger: true,\n  withNominations: false,\n  withPrefs: true,\n};\n\ntype ValidatorInfo = {\n  id: string;\n};\n\nexport async function getRankingData() {\n  const api = await ApiPromise.create({ provider });\n  const subquery = new GraphQLClient(\n    \"https://api.subquery.network/sq/ashikmeerankutty/staking-subquery\"\n  );\n  const { validatorsInfos } = await subquery.request(GetValidatorAddresses);\n  const validatorsInfo = await Promise.all(\n    validatorsInfos.nodes.map(async (authority: ValidatorInfo) => {\n      const accountInfo = await accountQuery(\n        authority.id,\n        stakingQueryFlags,\n        api\n      );\n      const identity = await getValidatorsWithIdentity(api, [authority.id]);\n      return {\n        ...accountInfo,\n        identity,\n        active: true,\n      };\n    })\n  );\n\n  const { referendums } = await subquery.request(GetReferendums);\n  const { nominations } = await subquery.request(GetNomination);\n  const { proposals } = await subquery.request(GetProposals);\n  const { councilVotes } = await subquery.request(GetCouncilVotes);\n  const { eraSlashes } = await subquery.request(GetEraSalashes);\n  const { eraPreferences } = await subquery.request(GetEraPreferences);\n  const { eraPoints } = await subquery.request(GetEraPoints);\n  const { maxNominatorRewardedPerValidator } = await subquery.request(\n    GetMaxNominatorRewardedPerValidator\n  );\n\n  const participateInGovernance: any = [];\n  // @ts-expect-error\n  proposals.nodes.forEach(({ seconds, proposer }) => {\n    participateInGovernance.push(proposer.toString());\n    // @ts-expect-error\n    seconds.forEach((accountId) =>\n      participateInGovernance.push(accountId.toString())\n    );\n  });\n  // @ts-expect-error\n  referendums.nodes.forEach(({ votes }) => {\n    // @ts-expect-error\n    votes.forEach(({ accountId }) =>\n      participateInGovernance.push(accountId.toString())\n    );\n  });\n\n  const clusters: any = [];\n\n  const rankingData = validatorsInfo.map((validator: any) => {\n    const { active } = validator;\n    const activeRating = active ? 2 : 0;\n    const stashAddress = validator.stashId.toString();\n    const controllerAddress = validator.controllerId.toString();\n    const {\n      verifiedIdentity,\n      hasSubIdentity,\n      name,\n      identityRating = 0,\n    } = parseIdentity(validator.identity);\n    const identity = JSON.parse(JSON.stringify(validator.identity));\n    const { clusterMembers, clusterName } = getClusterInfo(\n      hasSubIdentity,\n      validatorsInfo,\n      validator.identity\n    );\n    if (clusterName && !clusters.includes(clusterName)) {\n      clusters.push(clusterName);\n    }\n    const partOfCluster = clusterMembers > 1;\n    const subAccountsRating = hasSubIdentity ? 2 : 0;\n    const nominators = active\n      ? validator.exposure.others\n      : nominations.nodes.filter((nomination: { targets: [string] }) =>\n          nomination.targets.some(\n            // @ts-ignore\n            (target) => target === validator.accountId.toString()\n          )\n        ).length;\n    console.log(\n      maxNominatorRewardedPerValidator.maxNominatorRewardedPerValidator\n    );\n    const nominatorsRating =\n      nominators > 0 &&\n      nominators <=\n        maxNominatorRewardedPerValidator.maxNominatorRewardedPerValidator.toNumber()\n        ? 2\n        : 0;\n    const slashes =\n      eraSlashes.nodes.filter(\n        // @ts-ignore\n        ({ validators }) => {\n          const parsedValidators = JSON.parse(validators);\n          return parsedValidators[validator.accountId.toString()];\n        }\n      ) || [];\n\n    const slashed = slashes.length > 0;\n    const slashRating = slashed ? 0 : 2;\n\n    const commission =\n      parseInt(validator.validatorPrefs.commission.toString(), 10) / 10000000;\n\n    const commissionHistory = getCommissionHistory(\n      validator.accountId,\n      eraPreferences.nodes.map((pref: any) => {\n        return {\n          ...pref,\n          validators: JSON.parse(pref.validators),\n        };\n      })\n    );\n\n    const commissionRating = getCommissionRating(commission, commissionHistory);\n\n    const eraPointsHistory: any = [];\n    const payoutHistory: any = [];\n    const stakeHistory: any = [];\n    let activeEras = 0;\n    let performance = 0;\n    // eslint-disable-next-line\n    eraPoints.nodes.forEach((eraPoints: any) => {\n      const { id } = eraPoints;\n      let eraPayoutState = \"inactive\";\n      let eraPerformance = 0;\n      if (eraPoints.validators[stashAddress]) {\n        activeEras += 1;\n        const points = parseInt(\n          eraPoints.validators[stashAddress].toString(),\n          10\n        );\n        eraPointsHistory.push({\n          era: new BigNumber(id.toString()).toString(10),\n          points,\n        });\n        if (validator.stakingLedger.claimedRewards.includes(id)) {\n          eraPayoutState = \"paid\";\n        } else {\n          eraPayoutState = \"pending\";\n        }\n      } else {\n        // validator was not active in that era\n        eraPointsHistory.push({\n          era: new BigNumber(id.toString()).toString(10),\n          points: 0,\n        });\n        stakeHistory.push({\n          era: new BigNumber(id.toString()).toString(10),\n          self: 0,\n          others: 0,\n          total: 0,\n        });\n      }\n      payoutHistory.push({\n        era: new BigNumber(id.toString()).toString(10),\n        status: eraPayoutState,\n      });\n      // total performance\n      performance += eraPerformance;\n    });\n\n    const eraPointsHistoryValidator = eraPointsHistory.reduce(\n      // @ts-ignore\n      (total, era) => total + era.points,\n      0\n    );\n    const eraPointsHistoryTotals: any = [];\n    eraPoints.nodes.forEach(({ eraPoints }: any) => {\n      eraPointsHistoryTotals.push(parseInt(eraPoints.toString(), 10));\n    });\n    const eraPointsHistoryTotalsSum = eraPointsHistoryTotals.reduce(\n      // @ts-expect-error\n      (total, num) => total + num,\n      0\n    );\n    const numActiveValidators = validatorsInfo.length;\n\n    const eraPointsAverage = eraPointsHistoryTotalsSum / numActiveValidators;\n\n    const eraPointsPercent =\n      (eraPointsHistoryValidator * 100) / eraPointsHistoryTotalsSum;\n    const eraPointsRating =\n      eraPointsHistoryValidator > eraPointsAverage ? 2 : 0;\n    const payoutRating = getPayoutRating(payoutHistory);\n\n    const councilBacking = validator.identity?.parent\n      ? councilVotes.nodes.some(\n          // @ts-ignore\n          (vote) => vote.id.toString() === validator.accountId.toString()\n        ) ||\n        councilVotes.nodes.some(\n          // @ts-ignore\n          (vote) => vote.id.toString() === validator.identity.parent.toString()\n        )\n      : councilVotes.nodes.some(\n          // @ts-ignore\n          (vote) => vote.id.toString() === validator.accountId.toString()\n        );\n    const activeInGovernance = validator.identity?.parent\n      ? participateInGovernance.includes(validator.accountId.toString()) ||\n        participateInGovernance.includes(validator.identity.parent.toString())\n      : participateInGovernance.includes(validator.accountId.toString());\n    let governanceRating = 0;\n    if (councilBacking && activeInGovernance) {\n      governanceRating = 3;\n    } else if (councilBacking || activeInGovernance) {\n      governanceRating = 2;\n    }\n    const selfStake = active\n      ? new BigNumber(validator.exposure.own.toString())\n      : new BigNumber(validator.stakingLedger.total.toString());\n    const totalStake = active\n      ? new BigNumber(validator.exposure.total.toString())\n      : selfStake;\n    const otherStake = active ? totalStake.minus(selfStake) : new BigNumber(0);\n    const showClusterMember = true;\n    const totalRating =\n      activeRating +\n      identityRating +\n      subAccountsRating +\n      nominatorsRating +\n      commissionRating +\n      slashRating +\n      governanceRating +\n      eraPointsRating +\n      payoutRating;\n\n    return {\n      active,\n      activeRating,\n      name,\n      identity,\n      hasSubIdentity,\n      subAccountsRating,\n      verifiedIdentity,\n      identityRating,\n      stashAddress: stashAddress.toString(),\n      controllerAddress,\n      partOfCluster,\n      clusterName,\n      clusterMembers,\n      showClusterMember,\n      nominators,\n      nominatorsRating,\n      commission,\n      commissionHistory,\n      commissionRating,\n      performance,\n      slashed,\n      slashRating,\n      slashes,\n      councilBacking,\n      activeInGovernance,\n      governanceRating,\n      selfStake,\n      otherStake,\n      totalStake,\n      totalRating,\n      activeEras,\n      eraPointsPercent,\n    };\n  });\n\n  return {\n    rankingData,\n  };\n}\n", "import { u8aToString } from \"@polkadot/util\";\n\nconst getIdentityParent = (identityOfOpt: any, superOfOpt: any, api: any) => {\n  if (identityOfOpt?.isSome) {\n    // this identity has something set\n    return [identityOfOpt, undefined];\n  } else if (superOfOpt?.isSome) {\n    const superOf = superOfOpt.unwrap();\n\n    // we have a super\n    return [api.query.identity.identityOf(superOf[0]), superOf];\n  }\n\n  return [undefined, undefined];\n};\n\nconst dataAsString = (data: any): string | undefined => {\n  if (!data) {\n    return \"\";\n  }\n  return data?.isRaw\n    ? u8aToString(data.asRaw.toU8a(true))\n    : data.isNone\n    ? undefined\n    : data.toHex();\n};\n\nconst extractOther = (additional: any[]): Record<string, string> => {\n  return additional.reduce(\n    (other: Record<string, string>, [_key, _value]): Record<string, string> => {\n      const key = dataAsString(_key);\n      const value = dataAsString(_value);\n\n      if (key && value) {\n        other[key] = value;\n      }\n\n      return other;\n    },\n    {}\n  );\n};\n\nconst UNDEF_HEX = { toHex: (): void => undefined };\n\nconst extractIdentity = (identityOfOpt: any, superOf: any) => {\n  if (!identityOfOpt?.isSome) {\n    // @ts-ignore\n    return { judgements: [] };\n  }\n\n  const { info, judgements } = identityOfOpt.unwrap();\n  const topDisplay = dataAsString(info.display);\n\n  return {\n    display: (superOf && dataAsString(superOf[1])) || topDisplay,\n    displayParent: superOf && topDisplay,\n    email: dataAsString(info.email),\n    image: dataAsString(info.image),\n    judgements,\n    legal: dataAsString(info.legal),\n    other: extractOther(info.additional),\n    parent: superOf && superOf[0],\n    pgp: info.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),\n    riot: dataAsString(info.riot),\n    twitter: dataAsString(info.twitter),\n    web: dataAsString(info.web),\n  };\n};\n\nexport const getBase = (api: any, accountId: any) => {\n  return accountId && api.query.identity?.identityOf\n    ? api.queryMulti([\n        [api.query.identity.identityOf, accountId],\n        [api.query.identity.superOf, accountId],\n      ])\n    : [undefined, undefined];\n};\n\nexport const getIdentity = async (accountId: any, api: any) => {\n  const [identityOfOpt, superOfOpt] = await api.queryMulti([\n    [api.query.identity.identityOf, accountId],\n    [api.query.identity.superOf, accountId],\n  ]);\n  const parent = getIdentityParent(identityOfOpt, superOfOpt, api);\n  // @ts-ignore\n  const identityInfo = extractIdentity(parent[0], parent[1]);\n  return identityInfo;\n};\n\nexport const getValidatorsWithIdentity = async (\n  api: any,\n  validatorAddresses: any\n) => {\n  const validatorsWithIdentity = validatorAddresses.map(\n    async (validatorAddresses: any) => {\n      try {\n        const identity = await getIdentity(validatorAddresses, api);\n        return {\n          identity,\n        };\n      } catch (err) {\n        return {};\n      }\n    }\n  );\n  return Promise.all(validatorsWithIdentity);\n};\n", "\n// parse into Indexes\nfunction parse([\n  currentIndex,\n  activeEra,\n  activeEraStart,\n  currentEra,\n  validatorCount,\n]: any) {\n  return {\n    activeEra,\n    activeEraStart,\n    currentEra,\n    currentIndex,\n    validatorCount,\n  };\n}\n\n// query based on latest\nasync function queryStaking(api: any) {\n  const [currentIndex, activeOpt, currentEra, validatorCount] =\n    await api.queryMulti([\n      api.query.session.currentIndex,\n      api.query.staking.activeEra,\n      api.query.staking.currentEra,\n      api.query.staking.validatorCount,\n    ]);\n\n  const { index, start } = activeOpt.unwrapOrDefault();\n\n  return parse([\n    currentIndex,\n    index,\n    start,\n    currentEra.unwrapOrDefault(),\n    validatorCount,\n  ]);\n}\n\n// query based on latest\nasync function querySession(api: any) {\n  const currentIndex = await api.query.session.currentIndex();\n  const eraIndex = await api.registry.createType(\"EraIndex\");\n  const option = await api.registry.createType(\"Option<Moment>\");\n  const u32option = await api.registry.createType(\"u32\");\n  return parse([currentIndex, eraIndex, option, eraIndex, u32option]);\n}\n\n// empty set when none is available\nasync function empty(api: any) {\n  return parse([\n    await api.registry.createType(\"SessionIndex\", 1),\n    await api.registry.createType(\"EraIndex\"),\n    await api.registry.createType(\"Option<Moment>\"),\n    await api.registry.createType(\"EraIndex\"),\n    await api.registry.createType(\"u32\"),\n  ]);\n}\n\nexport async function getSessionIndexes(api: any) {\n  if (api.query.session) {\n    if (api.query.staking) {\n      return queryStaking(api);\n    }\n    return querySession(api);\n  }\n  return empty(api);\n}\n", "import { getSessionIndexes } from \"./session\";\n\nfunction parseDetails(\n  stashId: any,\n  controllerIdOpt: any,\n  nominatorsOpt: any,\n  rewardDestination: any,\n  validatorPrefs: any,\n  exposure: any,\n  stakingLedgerOpt: any\n) {\n  return {\n    accountId: stashId,\n    controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),\n    exposure,\n    nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],\n    rewardDestination,\n    stakingLedger: stakingLedgerOpt.unwrapOrDefault(),\n    stashId,\n    validatorPrefs,\n  };\n}\n\nasync function getLedgers(api: any, optIds: any, { withLedger = false }: any) {\n  const ids = optIds\n    .filter(\n      // @ts-ignore\n      (opt): opt => withLedger && !!opt && opt.isSome\n    )\n    // @ts-ignore\n    .map((opt) => opt.unwrap());\n  const emptyLed = api.registry.createType(\"Option<StakingLedger>\");\n\n  let optLedgers: any[] = [];\n\n  if (ids.length) {\n    optLedgers = await api.query.staking.ledger.multi(ids);\n  }\n  let offset = -1;\n\n  return optIds.map(\n    // @ts-ignore\n    (opt) => (opt && opt.isSome ? optLedgers[++offset] || emptyLed : emptyLed)\n  );\n}\n\nasync function getStashInfo(\n  api: any,\n  stashIds: any[],\n  activeEra: any,\n  {\n    withController,\n    withDestination,\n    withExposure,\n    withLedger,\n    withNominations,\n    withPrefs,\n  }: any\n) {\n  const emptyNoms = await api.registry.createType(\"Option<Nominations>\");\n  const emptyRewa = await api.registry.createType(\"RewardDestination\");\n  const emptyExpo = await api.registry.createType(\"Exposure\");\n  const emptyPrefs = await api.registry.createType(\"ValidatorPrefs\");\n\n  const bonded =\n    withController || withLedger\n      ? await api.query.staking.bonded.multi(stashIds)\n      : stashIds.map(() => null);\n  const nominators = withNominations\n    ? await api.query.staking.nominators.multi(stashIds)\n    : stashIds.map(() => emptyNoms);\n  const payee = withDestination\n    ? await api.query.staking.payee.multi(stashIds)\n    : stashIds.map(() => emptyRewa);\n  const validators = withPrefs\n    ? await api.query.staking.validators.multi(stashIds)\n    : stashIds.map(() => emptyPrefs);\n  const erasStakers = withExposure\n    ? await api.query.staking.erasStakers.multi(\n        stashIds.map((stashId) => [activeEra, stashId])\n      )\n    : stashIds.map(() => emptyExpo);\n  return [bonded, nominators, payee, validators, erasStakers];\n}\n\nasync function getBatch(api: any, activeEra: any, stashIds: any[], flags: any) {\n  const [\n    controllerIdOpt,\n    nominatorsOpt,\n    rewardDestination,\n    validatorPrefs,\n    exposure,\n  ] = await getStashInfo(api, stashIds, activeEra, flags);\n\n  const stakingLedgerOpts = await getLedgers(api, controllerIdOpt, flags);\n\n  const parsedDetails = stashIds.map(\n    async (stashId, index) =>\n      await parseDetails(\n        stashId,\n        controllerIdOpt[index],\n        nominatorsOpt[index],\n        rewardDestination[index],\n        validatorPrefs[index],\n        exposure[index],\n        stakingLedgerOpts[index]\n      )\n  );\n\n  return Promise.all(parsedDetails);\n}\n\nexport async function accountQuery(\n  accountId: Uint8Array | string,\n  flags: any,\n  api: any\n) {\n  const [first] = await accountQueryMulti([accountId], flags, api);\n  return first;\n}\n\nexport async function accountQueryMulti(\n  accountIds: (Uint8Array | string)[],\n  flags: any,\n  api: any\n) {\n  if (accountIds.length) {\n    const { activeEra } = await getSessionIndexes(api);\n    const stashIds = await Promise.all(\n      accountIds.map(\n        async (accountId) =>\n          await api.registry.createType(\"AccountId\", accountId)\n      )\n    );\n\n    return await getBatch(api, activeEra, stashIds, flags);\n  }\n  return [];\n}\n", "import { BigNumber } from \"bignumber.js\";\n\nexport const getPayoutRating = (payoutHistory: any) => {\n  const pendingEras = payoutHistory.filter(\n    (era: any) => era.status === \"pending\"\n  ).length;\n  if (pendingEras <= 1) {\n    return 3;\n  }\n  if (pendingEras <= 3 * 1) {\n    return 2;\n  }\n  if (pendingEras < 7 * 1) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const isIdentityVerified = (identity: any) => {\n  if (identity.judgements?.length === 0) {\n    return false;\n  }\n\n  if (!identity.judgements) {\n    return false;\n  }\n\n  return (\n    identity.judgements\n      // @ts-ignore\n      .filter(([, judgement]) => !judgement.isFeePaid)\n      // @ts-ignore\n      .some(([, judgement]) => judgement.isKnownGood || judgement.isReasonable)\n  );\n};\n\nexport const subIdentity = (identity: any) => {\n  if (\n    identity.displayParent &&\n    identity.displayParent !== \"\" &&\n    identity.display &&\n    identity.display !== \"\"\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const getName = (identity: any) => {\n  if (\n    identity.displayParent &&\n    identity.displayParent !== \"\" &&\n    identity.display &&\n    identity.display !== \"\"\n  ) {\n    return `${identity.displayParent}/${identity.display}`;\n  }\n  return identity.display || \"\";\n};\n\nexport const getIdentityRating = (\n  name: any,\n  verifiedIdentity: any,\n  hasAllFields: any\n) => {\n  if (verifiedIdentity && hasAllFields) {\n    return 3;\n  }\n  if (verifiedIdentity && !hasAllFields) {\n    return 2;\n  }\n  if (name !== \"\") {\n    return 1;\n  }\n  return 0;\n};\n\nexport const parseIdentity = (identities: any) => {\n  if (identities.length === 0) {\n    return {};\n  }\n  const { identity } = identities[0];\n  const verifiedIdentity = isIdentityVerified(identity);\n  const hasSubIdentity = subIdentity(identity);\n  const name = getName(identity);\n  const hasAllFields =\n    identity.display &&\n    identity.legal &&\n    identity.web &&\n    identity.email &&\n    identity.twitter &&\n    identity.riot;\n  const identityRating = getIdentityRating(\n    name,\n    verifiedIdentity,\n    hasAllFields\n  );\n  return {\n    verifiedIdentity,\n    hasSubIdentity,\n    name,\n    identityRating,\n  };\n};\n\nexport const getCommissionHistory = (accountId: any, erasPreferences: any) => {\n  const commissionHistory: any = [];\n  // @ts-ignore\n  erasPreferences.forEach(({ id, validators }) => {\n    if (validators[accountId]) {\n      commissionHistory.push({\n        era: new BigNumber(id.toString()).toString(10),\n        commission: (validators[accountId].commission / 10000000).toFixed(2),\n      });\n    } else {\n      commissionHistory.push({\n        era: new BigNumber(id.toString()).toString(10),\n        commission: null,\n      });\n    }\n  });\n  return commissionHistory;\n};\n\n// @ts-ignore\nexport const getCommissionRating = (commission, commissions) => {\n  const commissionHistory = commissions.map(\n    ({ commission }: { commission: string }) => {\n      if (!commission) {\n        return 0;\n      }\n      return parseInt(commission, 10);\n    }\n  );\n  if (commission !== 100 && commission !== 0) {\n    if (commission > 10) {\n      return 1;\n    }\n    if (commission >= 5) {\n      if (\n        commissionHistory.length > 1 &&\n        commissionHistory[0].commission >\n          commissionHistory[commissionHistory.length - 1].commission\n      ) {\n        return 3;\n      }\n      return 2;\n    }\n    if (commission < 5) {\n      return 3;\n    }\n  }\n  return 0;\n};\n\nconst getClusterName = (identity: any) => identity.displayParent || \"\";\n\nexport const getClusterInfo = (\n  hasSubIdentity: any,\n  validators: any,\n  validatorIdentities: any\n) => {\n  const validatorIdentity =\n    validatorIdentities.length > 0 ? validatorIdentities[0].identity : {};\n  if (!hasSubIdentity) {\n    // string detection\n    // samples: DISC-SOFT-01, BINANCE_KSM_9, SNZclient-1\n    if (validatorIdentity.display) {\n      const stringSize = 6;\n      const clusterMembers = validators.filter(\n        // @ts-ignore\n        ({ identity }) =>\n          (identity.display || \"\").substring(0, stringSize) ===\n          validatorIdentity.display.substring(0, stringSize)\n      ).length;\n      const clusterName = validatorIdentity.display\n        .replace(/\\d{1,2}$/g, \"\")\n        .replace(/-$/g, \"\")\n        .replace(/_$/g, \"\");\n      return {\n        clusterName,\n        clusterMembers,\n      };\n    }\n    return {\n      clusterName: \"\",\n      clusterMembers: 0,\n    };\n  }\n\n  const clusterMembers = validators.filter(\n    // @ts-ignore\n    ({ identity: identities }) => {\n      const identity = identities.length > 0 ? identities[0].identity : {}\n      return identity.displayParent === validatorIdentity.displayParent\n    }\n  ).length;\n  const clusterName = getClusterName(validatorIdentity);\n  return {\n    clusterName,\n    clusterMembers,\n  };\n};\n", "import { gql } from \"graphql-request\";\n\nexport const GetValidatorAddresses = gql`\n  query {\n    validatorsInfos(first: 500) {\n      nodes {\n        id\n      }\n    }\n  }\n`;\n\nexport const GetEraSalashes = gql`\n  query {\n    eraSlashes(first: 500) {\n      nodes {\n        id\n        validators\n      }\n    }\n  }\n`;\n\nexport const GetEraPreferences = gql`\n  query {\n    eraPreferences(first: 500) {\n      nodes {\n        id\n        validators\n      }\n    }\n  }\n`;\n\nexport const GetProposals = gql`\n  query {\n    proposals(first: 500) {\n      nodes {\n        id\n        proposer\n        seconds\n      }\n    }\n  }\n`;\n\nexport const GetMaxNominatorRewardedPerValidator = gql`\n  query {\n    maxNominatorRewardedPerValidator(id: \"1\") {\n      maxNominatorRewardedPerValidator\n    }\n  }\n`;\n\nexport const GetCouncilVotes = gql`\n  query {\n    councilVotes(first: 500) {\n      nodes {\n        id\n        stake\n        votes\n      }\n    }\n  }\n`;\n\n\nexport const GetEraPoints = gql`\n  query {\n    eraPoints(first: 500) {\n      nodes {\n        id\n        eraPoints\n        validators\n      }\n    }\n  }\n`;\n\nexport const GetNomination = gql`\n  query {\n    nominations(first: 500) {\n      nodes {\n        id\n        nominator\n        targets\n      }\n    }\n  }\n`;\n\nexport const GetReferendums = gql`\n  query {\n    referendums(first: 500) {\n      nodes {\n        id\n        votes\n      }\n    }\n  }\n`;"],
  "mappings": "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",
  "names": []
}
